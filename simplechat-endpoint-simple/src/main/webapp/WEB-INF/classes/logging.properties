############################################################
# Extraeinstellungen für Formatter
############################################################
#java.util.logging.SimpleFormatter.format=[%1$tF %1$tT] [%4$-7s] %5$s %n
#1catalina.java.util.logging.SimpleFormatter.format="[%1$tc] %4$s %2$s: %5$s%6$s%n"
# Der ConsoleHandler gibt die Nachrichten auf std.err aus
#handlers= java.util.logging.ConsoleHandler
# Alternativ können weitere Handler hinzugenommen werden. Hier z.B. der Filehandler
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
# Festlegen des Standard Loglevels
.level=INFO
############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################
# Die Nachrichten in eine Datei im Benutzerverzeichnis schreiben
java.util.logging.FileHandler.pattern=${catalina.home}/logs/simplechat.log
java.util.logging.FileHandler.limit=50000
java.util.logging.FileHandler.count=1
#java.util.logging.FileHandler.formatter=java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.FileHandler.level=DEBUG
# Zusätzlich zu den normalen Logleveln kann für jeden Handler noch ein eigener Filter
# vergeben werden. Das ist nützlich wenn beispielsweise alle Nachrichten auf der Konsole ausgeben werden sollen
# aber nur ab INFO in das Logfile geschrieben werden soll.
java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
############################################################
# Extraeinstellungen für einzelne Logger
############################################################
# Für einzelne Logger kann ein eigenes Loglevel festgelegt werden.
at.csgit.training=FINEST
# Error log configured in Contoller
simplechat.pattern=${catalina.home}/logs/error.log
simplechat.level=FINEST
